#!/usr/bin/env node

var fs = require('fs');
var mkdirp = require('mkdirp');

if (process.argv.length !== 3 && process.argv.length !== 4) {
  console.log('Usage: mkmodel <model-name> <type?>');
  process.exit();
}

var name = process.argv[2];
if (!/^([a-z-])+$/.test(name)) {
  console.log('must be a hyphen case name');
  process.exit(1);
}

var type = process.argv[3] || 'common';
if (['common', 'server', 'client'].indexOf(type) === -1) {
  console.log('type must be one of common, server, client');
  process.exit(1);
}

var path = `./src/${type}/models/${name}/`;
mkdirp.sync(path);
console.log('Making path:', path);

var camelName = name.replace(/(^|-)[a-z]/g, (s) => s.replace('-', '').toUpperCase());

function writeFile(path, data) {
  try {
    return fs.writeFileSync(path, data, {
      flag: 'wx', // x = fail if file exists
      encoding: 'utf8'
    });
  } catch (error) {
    return console.log("Skipping " + path);
  }
}

// Make the TypeScript file
writeFile(path + name + '.ts',
`import { BaseImmutable, Property, isInstanceOf } from 'immutable-class';
import { $, Expression } from 'plywood';

// I am: export * from './${name}/${name}';

export interface ${camelName}Value {

}

export interface ${camelName}JS {

}

export class ${camelName} extends BaseImmutable<${camelName}Value, ${camelName}JS> {

  static is${camelName}(candidate: any): candidate is ${camelName} {
    return isInstanceOf(candidate, ${camelName});
  }

  static fromJS(parameters: ${camelName}JS): ${camelName} {    
    return new ${camelName}(BaseImmutable.jsToValue(${camelName}.PROPERTIES, parameters));
  }

  static PROPERTIES: Property[] = [
    //{ name: 'blah' }
  ];
  
  //public blah: string;

  constructor(parameters: ${camelName}Value) {
    super(parameters);
  }

}
BaseImmutable.finalize(${camelName});
`);


// Make the TypeScript test file
writeFile(path + name + '.mocha.ts',
`import { expect } from 'chai';
import { testImmutableClass } from 'immutable-class-tester';

import { $, Expression } from 'plywood';
import { ${camelName} } from './${name}';

describe('${camelName}', () => {
  it('is an immutable class', () => {
    testImmutableClass(${camelName}, [

    ]);
  });

});
`);
