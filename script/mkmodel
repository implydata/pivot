#!/usr/bin/env coffee

fs = require('fs')
mkdirp = require('mkdirp')

if process.argv.length isnt 3
  console.log('Usage: mkmodel <model-name>')
  process.exit()

name = process.argv[2]

if not /^([a-z-])+$/.test(name)
  console.log('must be a hyphen case name')
  process.exit()

path = './src/common/models/' + name + '/'
mkdirp.sync(path)
console.log('Making path:', path)

camelName = name.replace(/(^|-)[a-z]/g, (s) -> s.replace('-', '').toUpperCase())

writeFile = (path, data) ->
  try
    fs.writeFileSync(path, data, {
      flag: 'wx' # x = fail if file exists
      encoding: 'utf8'
    })
  catch
    console.log("Skipping #{path}")

# Make the TypeScript file
writeFile(path + name + '.ts', """
'use strict';

import { Class, Instance, isInstanceOf } from 'immutable-class';
import { $, Expression } from 'plywood';

export interface #{camelName}Value {

}

export interface #{camelName}JS {

}

var check: Class<#{camelName}Value, #{camelName}JS>;
export class #{camelName} implements Instance<#{camelName}Value, #{camelName}JS> {

  static is#{camelName}(candidate: any): boolean {
    return isInstanceOf(candidate, #{camelName});
  }

  static fromJS(parameters: #{camelName}JS): #{camelName} {
    var value: RefreshRuleValue = {
      /* */
    };
    return new #{camelName}(value);
  }

  constructor(parameters: #{camelName}Value) {

  }

  public valueOf(): #{camelName}Value {
    return {

    };
  }

  public toJS(): #{camelName}JS {
    return {

    };
  }

  public toJSON(): #{camelName}JS {
    return this.toJS();
  }

  public toString(): string {
    return `[#{camelName}: ${this.name}]`;
  }

  public equals(other: #{camelName}): boolean {
    return #{camelName}.is#{camelName}(other); // && more...
  }

}
check = #{camelName};

""")


# Make the TypeScript test file
writeFile(path + name + '.mocha.ts', """
'use strict';

import { expect } from 'chai';
import { testImmutableClass } from 'immutable-class/build/tester';

import { $, Expression } from 'plywood';
import { #{camelName} } from './#{name}';

describe('#{camelName}', () => {
  it('is an immutable class', () => {
    testImmutableClass(#{camelName}, [

    ]);
  });

});

""")
